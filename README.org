#+TITLE: "/*know thyself*/"
#+AUTHOR: cypherbeep
#+STARTUP: overview

* Structure and Interpretetion of Computer Programs Study Plan
- Book Link: [[https://sarabander.github.io/sicp/][Beautiful SICP (unofficial_texinfo_format)]]
- Course Link
  - [[https://www.youtube.com/playlist?list=PLE18841CABEA24090][SICP by Abelson & Sussman]]
  - [[https://www.youtube.com/playlist?list=PLhMnuBfGeCDNgVzLPxF9o5UNKG1b-LFY9][CS 61A SICP Brain Harvey]]
- Solutions
  - [[https://zv.github.io/][Ultimate SICP Notes and Solutions :]] [[https://github.com/zv/][@zv]]
  - [[https://github.com/codereport/SICP-2020][codereport solutions in Racket (threading and stuff used)]]
- Other Cool Stuff
  - [[https://corecursive.com/039-hal-abelson-sicp/#][Language Oriented Design - Discussing SICP with Hal Abelson (Audio)]]
  - [[https://letoverlambda.com/index.cl/toc][Let Over Lambdaâ€”50 Years of Lisp]]
  - [[https://leanpub.com/lispwebtales][Lisp Web Tales]]
  - [[https://paperswelove.org/2017/video/will-byrd-most-beautiful-program/][William Byrd on The Most Beautiful Program Ever Written]]
  - [[http://www.softwarepreservation.org/projects/LISP/book/LISP%201.5%20Programmers%20Manual.pdf/view][LISP 1.5 Programmer's Manual - McCarthy]]
  - [[https://www.greghendershott.com/fear-of-macros/all.html][Fear of Macros]]
  - [[https://www.openbookproject.net/books/StudentCSP/][Big Ideas in CS]]
  - [[https://github.com/schemedoc/bibliography][schemedoc]]
** Functional Programming [0/4]
- [ ] Read [Section 1.1: The Elements of Programming]
- [ ] Watch Computer Science 61A - Lecture 1: functional programming
- [ ] Watch Computer Science 61A - Lecture 2: functional programming
** Higher-order procedures [/]
- [ ] Read [Section 1.3: Formulating Abstractions with Higher-Order Procedures]
- [ ] Watch [Computer Science 61A - Lecture 3: higher-order procedures
- [ ] Watch [Computer Science 61A - Lecture 4: higher-order procedures
** Recursion and iteration [/]
- [ ] Read [Section 1.2-1.2.4: Procedures and the Processes They Generate]
- [ ] Watch [Computer Science 61A - Lecture 7: orders of growth]
- [ ] Watch [Computer Science 61A - Lecture 8: recursion and iteration]
** Data abstraction, sequences [/]
- [ ] Read [Section 2.2.1: Representing Sequences]
- [ ] Watch [Computer Science 61A - Lecture 9: data abstraction]
- [ ] Read [Sections 2.1: Introduction to Data Abstraction]
- [ ] Watch [Computer Science 61A - Lecture 10: sequences]
- [ ] Watch [Computer Science 61A - Lecture 11: Example: calculator]
** Hierarchical data/Scheme interpreter [/]
- [ ] Read [Section 2.2.2: Hierarchical Structures]
- [ ] Read [Section 2.2.3: Sequences as Conventional Interfaces]
- [ ] Read [Section 2.3.1: Quotation]
- [ ] Read [Section 2.3.3 Example: Representing Sets]
- [ ] Watch [Computer Science 61A - Lecture 12: hierarchical data]
- [ ] Watch [Computer Science 61A - Lecture 13: hierarchical data]
- [ ] Watch [Computer Science 61A - Lecture 14: Example: Scheme-1 interpreter]
** Generic operators [/]
- [ ] Read [Section 2.4: Multiple Representations for Abstract Data]
- [ ] Read [Section 2.5 (through 2.5.2): Systems with Generic Operations]
- [ ] Watch [Computer Science 61A - Lecture 16: generic operators]
- [ ] Watch [Computer Science 61A - Lecture 17: generic operators]
** Object-oriented programming [/]
- [ ] Read [Object-Oriented Programming | Above the line view]
- [ ] Watch [Computer Science 61A - Lecture 18: object-oriented programming]
- [ ] Watch [Computer Science 61A - Lecture 19: object-oriented programming]
- [ ] Watch [Computer Science 61A - Lecture 20: object-oriented programming]
** Local state variables, environments [/]
- [ ] Read [Section 3.1: Assignment and Local State]
- [ ] Read [Section 3.2: The Environment Model of Evaluation]
- [ ] Read [Object-Oriented Programming | Below the line view]
- [ ] Watch [Computer Science 61A - Lecture 21: assignment and state]
- [ ] Watch [Computer Science 61A - Lecture 22: environments]
- [ ] Watch [Computer Science 61A - Lecture 23: environments]
** Mutable data, queues, tables [/]
- [ ] Read [Sections 3.3.1-3.3.3]
- [ ] Watch [Computer Science 61A - Lecture 24: mutable data]
- [ ] Watch [Computer Science 61A - Lecture 25: mutable data]
- [ ] Watch [Computer Science 61A - Lecture 26: vectors]
** Client/server paradigm, Concurrency [/]
- [ ] Read [Section 3.4: Concurrency: Time Is of the Essence]
- [ ] Watch [Computer Science 61A - Lecture 30: client-server programming]
- [ ] Watch [Computer Science 61A - Lecture 31: concurrency]
- [ ] Watch [Computer Science 61A - Lecture 32: concurrency]
** Streams [/]
- [ ] Read [Section 3.5.1-3.5.3]
- [ ] Read [Section 3.5.5: Modularity of Functional Programs and ModularityofObjects]
- [ ] Watch [Computer Science 61A - Lecture 33: streams]
- [ ] Watch [Computer Science 61A - Lecture 34: streams]
- [ ] Watch [Computer Science 61A - Lecture 35: Therac-25]
** Metacircular evaluator [/]
- [ ] Read [Section 4.1: The Metacircular Evaluator]
- [ ] Watch [Computer Science 61A - Lecture 36: metacircular evaluator]
- [ ] Watch [Computer Science 61A - Lecture 37: metacircular evaluator]
- [ ] Watch [Computer Science 61A - Lecture 38: mapreduce]
- [ ] Watch [Computer Science 61A - Lecture 39: mapreduce]
** Analyzing evaluator [/]
- [ ] Watch [Computer Science 61A - Lecture 40: analyzing evaluator]
** Lazy evaluator, Nondeterministic evaluator [/]
- [ ] Read [Section 4.2: Variations on a Scheme -- Lazy Evaluation]
- [ ] Read [Section 4.3: Variations on a Scheme -- Nondeterministic Computing]
- [ ] Watch [Computer Science 61A - Lecture 41: lazy evaluator]
** Logic programming [/]
- [ ] Read [Section 4.4.1-4.43]
- [ ] Watch [Computer Science 61A - Lecture 42: logic programming]
- [ ] Watch [Computer Science 61A - Lecture 43: logic programming]
** Review
- [ ] Watch [Computer Science 61A - Lecture 44: Review]
* Next Books/Courses
** Software Design for Flexibility
** Concepts, Techniques, and Models of Computer Programming
** A Discpline of Programming
** Domain-Driven Design
* Credits
** Book: https://sarabander.github.io/sicp/
** Course: Brain Harvey, Harold Abelson and Gerald Jay Sussman with Julie Sussman
** Solutions: https://github.com/codereport/
** and all the other authors of cool books mentioned above.....
